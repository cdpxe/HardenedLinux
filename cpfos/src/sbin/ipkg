#!/bin/bash -e
# (bash gives us more possibilities)
# 
# ipkg is distributed under the following license:
# 
# Copyright (c) 2007 Steffen Wendzel <steffen (at) wendzel (dot) de>
# Written 2007 by Steffen Wendzel
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Developers note for the coding style:
# 	BIG_CHAR_VAR   <-- var is exported
#	small_char_var <-- only used within this script

# How does it work? -- An important note for all developers
# ---------------------------------------------------------
# ipkg currently does this steps in the following order:
# 
# - check if pkg file exists, if we are root and if $1 is given
# - read in config file, if available
# - clean up old /install dir
# - check if the package version is already installed
# - install dependencies
# - run pre-installer script (if available in pkg install/preinst.sh)
# - unpack archive in /
# - run config assistant (let the user choose if he wants to use the
#   .new files instead of the existing ones or not) and remove left
#   over .new files at the end
# - run post-installer script (if available in pkg install/postinst.sh)
# - register the pkg in the system by adding the pkginf file to
#   /var/cache/packages/
# - remove /install

CWD=`pwd`
pkgcache=/var/cache/packages
conffile=/etc/cpfos.conf
pkginf_tmp=${pkgcache}/pkginf_tmp.$$
preinst_tmp=${pkgcache}/preinst.$$.sh

# this function simply calls installpkg for slackware package files
run_slackinst ()
{
	echo "Running installpkg for $1 ..."
	/sbin/installpkg #$1 >/dev/null
	if [ "$?" = "0" ]; then
		exit 0
	else
		exit 1
	fi
}


# check $1
if [ "$1" = "" ]; then
	echo "usage: $0 <package file>"
	exit 1
fi

# check if we are root
if [ "`id -u`" != "0" ]; then
	echo "you need root access to install packages."
	exit 1
fi

# check if pkg file exists
if [ ! -f $1 ]; then
	echo "$1 does not exist."
	exit 1
fi

# get the direct path to the package (needed to extract it in both
# cases: if the user gave us an absolute path and if he gave us the
# relative one)
if [ -f ./$1 ]; then
	pkgfile=`pwd`/$1
else
	pkgfile=$1
fi

# read config file, if available
if [ -f $conffile ]; then
	for set_var in `awk '{if ($1 == "set") print $2}' $conffile`; do
		if [ "$set_var" = "ipkg_always_keep_cfg" ]; then
			ipkg_always_keep_cfg="1"
		fi
	done
fi

# clean up old /install dir
if [ -f /install ]; then
	echo "I need to delete /install. Enter 'yes' if this is okay "
	echo "for you (all included data will get lost!)."
	read answer
	if [ "$answer" != "yes" ]; then
		echo "aborting."
		exit 1
	fi
	rm -rf /install
fi

# check, if this is a slackware package. do an echo in the case of NO to
# prevent bad error return codes what would lead into an exit of ipkg since
# we use bash -e
slack_desc=`tar -tzf $pkgfile | egrep 'install/slack-desc$' || echo -n ""`
if [ "$slack_desc" != "" ]; then
	run_slackinst $pkgfile
fi

# check if the package version is already installed
tar xzOf $pkgfile ./install/pkginf > $pkginf_tmp

# extract the preinstallation script (if available)
tar xzOf $pkgfile ./install/preinst.sh > $preinst_tmp 2>/dev/null || echo >/dev/null
if [ -f $preinst_tmp ]; then
	chmod +x $preinst_tmp
fi

# get the pkgname + dependencies
pkgname=`awk '/^%name[\t\ ]*/ {print $2}' $pkginf_tmp`
version=`awk '/^%version[\t\ ]*/ {print $2}' $pkginf_tmp`
deps=`egrep "^%deps[\t\ ]*" $pkginf_tmp | sed 's/^%deps[\t\ ]*//'`

# check if this version is already installed
if [ -f ${pkgcache}/${pkgname}.inf ]; then
	inst_version=`awk '/^%version[\t\ ]*/ {print $2}' ${pkgcache}/${pkgname}.inf`
	if [ "$inst_version" = "$version" ]; then
		echo "${pkgname}-${version} is already installed."
		exit 0
	fi
fi

# install dependencies
if [ "$deps" != "none" ]; then
	echo "dependencies: \'$deps\'"
	for dep in $deps; do
		# check if the pkgname is the same as the one of THIS package to
		# prevent DoS
		if [ "$dep" = "$pkgname" ]; then
			echo -n "alert: "
			echo "$pkgname has itself as dependency! Please fix this!"
			continue;
		fi
		# check if the dependency is already there
		if [ -f ${pkgcache}/${dep}.inf ]; then
			continue;
		fi
		# pkg is not there -> install it
		echo "${pkgname} depends on ${dep}. Installing ${dep}."
		ipkg `dirname $pkgfile`/$dep
		if [ "$?" != "0" ]; then
			echo -n "Aborting package installation due to "
			echo -n "errors while installing dependency "
			echo -n "${dep} for ${pkgname}."
			exit 1
		fi
	done
fi

cd /
# exec pre-installer script. this is always but $preinst_tmp could be an
# empty file so this would take no effect.
if [ -x $preinst_tmp ]; then
	echo "executing pre-installation script ..."
	/bin/sh $preinst_tmp
fi

# unpack the archive
echo "unpacking ..."
tar -xzf $pkgfile

# backward compatibility to slackware doinst.sh scripts
if [ -f install/doinst.sh ]; then
	echo "executing slackware installpkg ..."
	/bin/sh ./install/doinst.sh
fi

# play the config file assistant for files in /etc only!
if [ "$ipkg_always_keep_cfg" != "1" ]; then
	for conffile in `find /etc -name '*.new'`; do
		destfile=`echo $conffile | sed 's/\.new$//'`
		md5old=`md5sum $destfile | awk '{print $1}'`
		md5new=`md5sum $conffile | awk '{print $1}'`
		echo "found $destfile "
		if [ ! -f $destfile ]; then
			# there is no file to replace -> store the new f. there
			mv -v $conffile $destfile
		elif [ "$md5old" != "$md5new" ]; then
			answer="NOT_ACCEPTED"
			while [ "$answer" = "NOT_ACCEPTED" ]; do
				echo -n "Should I replace ${destfile} with its"
				echo -n " new version for you? Enter 'd' to "
				echo -n "see the differences. (y/n/d) [y] "
				read answer
				if [ "$answer" = "" -o "$answer" = "y" ]; then
					mv -v $conffile $destfile
				elif  [ "$answer" = "n" ]; then
					# remove new config file
					rm $conffile
				else
					diff -up $destfile $conffile | more
					# display question again
					answer="NOT_ACCEPTED"
				fi
			done
		else
			# md5sums are equal. remove the new file from filesystem
			rm $conffile
		fi
	done
fi

# run the post-installer script
if [ -f install/postinst.sh ]; then
	echo "executing post-installation script ..."
	/bin/sh ./install/postinst.sh
fi

# register the pkg in the system by adding the pkginf file to
# /var/cache/packages/
cat /install/pkginf > /var/cache/packages/${pkgname}.inf
# also store the file list there
tar -tzvf $pkgfile > /var/cache/packages/${pkgname}.files

# remove /install dir
rm -r /install
rm $pkginf_tmp
rm $preinst_tmp

exit 0


